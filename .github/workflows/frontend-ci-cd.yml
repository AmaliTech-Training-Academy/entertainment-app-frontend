name: CineVerse Frontend CI/CD

env:
  APP_NAME: 'entertainment-app-frontend'
  AWS_REGION: 'eu-west-1'
  TERRAFORM_VERSION: '1.6.0'
  NODE_VERSION: '18'

on:
  push:
    branches: [dev, staging, prod]
    paths: ['frontend/**', 'terraform/**', '.github/workflows/frontend-ci-cd.yml']
  pull_request:
    branches: [dev, staging, prod]
    paths: ['frontend/**', 'terraform/**']

jobs:
  # =============================================================================
  # Environment Configuration
  # =============================================================================
  setup:
    name: Setup Environment
    runs-on: self-hosted
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      should_deploy: ${{ steps.config.outputs.should_deploy }}
      is_production: ${{ steps.config.outputs.is_production }}
    steps:
      - name: Configure Environment
        id: config
        run: |
          BRANCH="${{ github.ref_name }}"
          EVENT_NAME="${{ github.event_name }}"
          
          echo "Environment Detection:"
          echo "Branch: $BRANCH"
          echo "Event: $EVENT_NAME"
          
          # Set environment based on branch mapping
          if [[ "$BRANCH" == "prod" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "is_production=true" >> $GITHUB_OUTPUT
            echo "Environment set to: prod (production)"
            ENV_NAME="prod"
          elif [[ "$BRANCH" == "staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
            echo "Environment set to: staging"
            ENV_NAME="staging"
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
            echo "Environment set to: dev (default)"
            ENV_NAME="dev"
          fi
          
          # Only deploy on push events to protected branches
          if [[ "$EVENT_NAME" == "push" && "$BRANCH" =~ ^(dev|staging|prod)$ ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Deployment enabled for push to $BRANCH"
            SHOULD_DEPLOY="true"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "Deployment disabled (event: $EVENT_NAME, branch: $BRANCH)"
            SHOULD_DEPLOY="false"
          fi
          
          # Output final configuration summary
          echo ""
          echo "Final Configuration:"
          echo "Environment: $ENV_NAME"
          echo "Should Deploy: $SHOULD_DEPLOY"
          echo "Is Production: $([ "$BRANCH" == "prod" ] && echo "true" || echo "false")"

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security:
    name: Security Scan
    runs-on: self-hosted
    needs: setup
    if: always() && (github.event_name == 'pull_request' || needs.setup.outputs.is_production == 'true')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: frontend
        run: npm ci

      # Run npm audit to check for known vulnerabilities
      - name: NPM Security Audit
        working-directory: frontend
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          npm audit --audit-level=moderate
        continue-on-error: true

      # Scan Terraform files for security issues
      - name: Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform/
          format: sarif
          soft_fail: true

      # Scan for exposed secrets in code
      - name: Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # Store security reports for review
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.sha }}
          path: frontend/npm-audit-report.json
          retention-days: 30

  # =============================================================================
  # Build and Test
  # =============================================================================
  build:
    name: Build & Test
    runs-on: self-hosted
    needs: [setup]
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: frontend
        run: npm ci

      # Build Angular application with environment-specific configuration
      - name: Build Application
        working-directory: frontend
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          echo "Building for environment: $ENV"

          # Select build configuration based on environment
          case "$ENV" in
            "dev")     npm run build -- --configuration=development ;;
            "staging") npm run build -- --configuration=staging ;;
            "prod")    npm run build -- --configuration=production ;;
            *)         echo "Unknown environment: $ENV" && exit 1 ;;
          esac

          echo "Build completed successfully"

          # Verify build output exists
          if [ -d "dist/${{ env.APP_NAME }}" ]; then
            echo "Build output found in dist/${{ env.APP_NAME }}"
            ls -la "dist/${{ env.APP_NAME }}"
          else
            echo "Build output not found in expected location"
            ls -la dist/
            exit 1
          fi

      # Run unit tests in headless mode
      - name: Run Tests
        working-directory: frontend
        run: |
          npm test -- --watch=false --browsers=ChromeHeadless
        continue-on-error: true

      # Store build artifacts for deployment
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ needs.setup.outputs.environment }}
          path: frontend/dist/${{ env.APP_NAME }}
          retention-days: 7

  # =============================================================================
  # Infrastructure Planning
  # =============================================================================
  plan:
    name: Infrastructure Plan
    runs-on: self-hosted
    needs: [setup, build]
    if: always() && needs.build.result == 'success'
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug Environment Configuration
        run: |
          echo "Plan Job Environment Debug:"
          echo "ENVIRONMENT (from env): $ENVIRONMENT"
          echo "setup.outputs.environment: ${{ needs.setup.outputs.environment }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "should_deploy: ${{ needs.setup.outputs.should_deploy }}"
          echo "is_production: ${{ needs.setup.outputs.is_production }}"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Create environment-specific Terraform configuration files
      - name: Create Environment Configuration
        working-directory: terraform
        run: |
          echo "Creating configuration for environment: $ENVIRONMENT"
          mkdir -p environments/$ENVIRONMENT
          
          # Create backend configuration for state management
          cat > environments/$ENVIRONMENT/backend.hcl << EOF
          bucket         = "cineverse-terraform-state-$ENVIRONMENT"
          key            = "frontend/terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          encrypt        = true
          dynamodb_table = "cineverse-terraform-locks"
          EOF
          
          # Create terraform variables file with corrected variable names
          cat > environments/$ENVIRONMENT/terraform.tfvars << EOF
          environment         = "$ENVIRONMENT"
          project_name        = "cineverse"
          aws_region          = "${{ env.AWS_REGION }}"
          alb_domain_name     = "cineverse-service-alb-staging-276074081.eu-west-1.elb.amazonaws.com"
          enable_waf          = $([ "$ENVIRONMENT" = "dev" ] && echo "false" || echo "true")
          enable_monitoring   = true
          
          # Resource tags for cost tracking and management
          tags = {
            Environment = "$ENVIRONMENT"
            Project     = "CineVerse"
            ManagedBy   = "Terraform"
            Branch      = "${{ github.ref_name }}"
            CommitSHA   = "${{ github.sha }}"
            DeployedBy  = "${{ github.actor }}"
            DeployedAt  = "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          
          echo "Created terraform.tfvars:"
          cat environments/$ENVIRONMENT/terraform.tfvars
          
          echo ""
          echo "Created backend.hcl:"
          cat environments/$ENVIRONMENT/backend.hcl

      - name: Terraform Init & Validate
        working-directory: terraform
        run: |
          echo "Initializing Terraform for environment: $ENVIRONMENT"
          
          # Initialize with backend configuration
          terraform init -backend-config="environments/$ENVIRONMENT/backend.hcl"
          
          # Validate configuration syntax
          terraform validate
          
          # Show current state summary for debugging
          RESOURCE_COUNT=$(terraform state list 2>/dev/null | wc -l)
          echo "Current state contains $RESOURCE_COUNT resources"
          
          if [[ $RESOURCE_COUNT -gt 0 ]]; then
            echo "Current resources in state:"
            terraform state list | head -10
            if [[ $RESOURCE_COUNT -gt 10 ]]; then
              echo "... and $((RESOURCE_COUNT - 10)) more"
            fi
          fi

      # Handle Terraform state locks intelligently
      - name: Handle Terraform State Lock
        working-directory: terraform
        run: |
          echo "Checking for state locks..."
          
          # Try a quick plan with timeout to detect locks
          timeout 30s terraform plan -var-file="environments/$ENVIRONMENT/terraform.tfvars" -detailed-exitcode >/dev/null 2>&1
          PLAN_RESULT=$?
          
          if [[ $PLAN_RESULT -eq 124 ]]; then
            echo "WARNING: Terraform plan timed out - likely due to state lock"
            echo "Checking DynamoDB for active locks..."
            
            # Query DynamoDB directly for lock information
            LOCK_INFO=$(aws dynamodb scan \
              --table-name "cineverse-terraform-locks" \
              --filter-expression "attribute_exists(LockID)" \
              --region "${{ env.AWS_REGION }}" \
              --output json 2>/dev/null || echo '{"Items":[]}')
            
            LOCK_COUNT=$(echo "$LOCK_INFO" | jq '.Items | length')
            
            if [[ $LOCK_COUNT -gt 0 ]]; then
              echo "Found $LOCK_COUNT active lock(s) in DynamoDB"
              echo "Lock details:"
              echo "$LOCK_INFO" | jq -r '.Items[].LockID.S // "Unknown"'
              
              # Extract the actual lock ID from DynamoDB
              ACTUAL_LOCK_ID=$(echo "$LOCK_INFO" | jq -r '.Items[0].LockID.S // empty')
              
              if [[ -n "$ACTUAL_LOCK_ID" ]]; then
                echo "Attempting to force unlock with ID: $ACTUAL_LOCK_ID"
                terraform force-unlock -force "$ACTUAL_LOCK_ID" || echo "Force unlock failed"
                
                # Wait for unlock to propagate
                sleep 5
              else
                echo "Could not extract lock ID from DynamoDB response"
              fi
            else
              echo "No locks found in DynamoDB - the issue might be elsewhere"
            fi
          elif [[ $PLAN_RESULT -eq 1 ]]; then
            echo "ERROR: Terraform plan failed with errors (not lock-related)"
            exit 1
          else
            echo "SUCCESS: No state lock detected"
          fi

      # Generate Terraform execution plan
      - name: Terraform Plan
        working-directory: terraform
        run: |
          echo "Creating Terraform plan for environment: $ENVIRONMENT"
          
          # Add timeout to prevent hanging indefinitely
          timeout 300s terraform plan \
            -var-file="environments/$ENVIRONMENT/terraform.tfvars" \
            -out="$ENVIRONMENT.tfplan" \
            -detailed-exitcode
          
          PLAN_EXIT_CODE=$?
          echo "PLAN_EXIT_CODE=$PLAN_EXIT_CODE" >> $GITHUB_ENV
          
          # Handle different plan exit codes
          case $PLAN_EXIT_CODE in
            0)
              echo "SUCCESS: No changes needed - infrastructure is up to date"
              ;;
            1)
              echo "ERROR: Terraform plan failed"
              exit 1
              ;;
            2)
              echo "SUCCESS: Changes detected - plan created successfully"
              ;;
            124)
              echo "ERROR: Terraform plan timed out after 5 minutes"
              exit 1
              ;;
          esac

      # Store plan for deployment phase - only if changes detected
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        if: env.PLAN_EXIT_CODE == '2'
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: terraform/${{ env.ENVIRONMENT }}.tfplan
          retention-days: 7

  # =============================================================================
  # Deployment
  # =============================================================================
  deploy:
    name: Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: self-hosted
    needs: [setup, plan]
    if: needs.setup.outputs.should_deploy == 'true' && needs.plan.result == 'success'
    environment: ${{ needs.setup.outputs.environment }}
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Recreate configuration files for deployment phase
      - name: Recreate Environment Configuration
        working-directory: terraform
        run: |
          echo "Recreating configuration for environment: $ENVIRONMENT"
          mkdir -p environments/$ENVIRONMENT
          
          # Recreate backend configuration
          cat > environments/$ENVIRONMENT/backend.hcl << EOF
          bucket         = "cineverse-terraform-state-$ENVIRONMENT"
          key            = "frontend/terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          encrypt        = true
          dynamodb_table = "cineverse-terraform-locks"
          EOF
          
          # Recreate terraform variables with corrected variable names
          cat > environments/$ENVIRONMENT/terraform.tfvars << EOF
          environment         = "$ENVIRONMENT"
          project_name        = "cineverse"
          aws_region          = "${{ env.AWS_REGION }}"
          alb_domain_name     = "cineverse-service-alb-staging-276074081.eu-west-1.elb.amazonaws.com"
          enable_waf          = $([ "$ENVIRONMENT" = "dev" ] && echo "false" || echo "true")
          enable_monitoring   = true
          
          # Resource tags for cost tracking and management
          tags = {
            Environment = "$ENVIRONMENT"
            Project     = "CineVerse"
            ManagedBy   = "Terraform"
            Branch      = "${{ github.ref_name }}"
            CommitSHA   = "${{ github.sha }}"
            DeployedBy  = "${{ github.actor }}"
            DeployedAt  = "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -backend-config="environments/$ENVIRONMENT/backend.hcl"

      # Download the previously created plan - handle missing artifacts gracefully
      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: terraform/

      # Check if plan file exists and set flag
      - name: Check Plan File Existence
        working-directory: terraform
        run: |
          if [[ -f "$ENVIRONMENT.tfplan" ]]; then
            echo "PLAN_FILE_EXISTS=true" >> $GITHUB_ENV
            echo "Plan file found - will apply existing plan"
          else
            echo "PLAN_FILE_EXISTS=false" >> $GITHUB_ENV
            echo "No plan file found - will create and apply new plan"
          fi

      # Apply infrastructure changes with proper plan handling
      - name: Apply Infrastructure Changes
        working-directory: terraform
        run: |
          if [[ "$PLAN_FILE_EXISTS" == "true" ]]; then
            echo "Applying existing plan file"
            terraform apply -auto-approve "$ENVIRONMENT.tfplan"
          else
            echo "Creating and applying new plan"
            terraform apply -auto-approve -var-file="environments/$ENVIRONMENT/terraform.tfvars"
          fi

      # Extract infrastructure outputs for deployment
      - name: Get Infrastructure Outputs
        id: outputs
        working-directory: terraform
        run: |
          {
            echo "s3_bucket=$(terraform output -raw s3_bucket_name)"
            echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)"
            echo "cloudfront_domain=$(terraform output -raw cloudfront_domain_name)"
          } >> $GITHUB_OUTPUT

      # Download build artifacts from build phase
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ env.ENVIRONMENT }}
          path: build

      # Deploy application to S3 with proper cache headers
      - name: Deploy to S3
        run: |
          S3_BUCKET="${{ steps.outputs.outputs.s3_bucket }}"
          
          echo "Deploying to S3 bucket: $S3_BUCKET"
          
          # Verify build contents
          echo "Build contents:"
          ls -la build/
          
          # Determine deployment path based on Angular build structure
          if [ -d "build/browser" ]; then
            echo "Angular SSR detected - deploying from browser/ directory"
            DEPLOY_PATH="build/browser"
          elif [ -f "build/index.html" ]; then
            echo "Standard Angular build detected"
            DEPLOY_PATH="build"
          else
            echo "ERROR: Neither build/browser nor build/index.html found!"
            echo "Available directories:"
            find build/ -type d
            echo "Available files:"
            find build/ -name "*.html"
            exit 1
          fi
          
          echo "Deploying from: $DEPLOY_PATH"
          echo "Contents of deploy directory:"
          ls -la "$DEPLOY_PATH"
          
          # Verify index.html exists in deploy path
          if [ ! -f "$DEPLOY_PATH/index.html" ]; then
            echo "ERROR: index.html not found in $DEPLOY_PATH"
            exit 1
          fi
          
          # Deploy with appropriate cache headers for performance
          echo "Syncing files to S3..."
          
          # First sync: Static assets with long cache (1 year)
          aws s3 sync "$DEPLOY_PATH/" s3://$S3_BUCKET/ --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" --exclude "*.js" --exclude "*.css"
          
          # Second sync: Dynamic files with short cache (no cache)
          aws s3 sync "$DEPLOY_PATH/" s3://$S3_BUCKET/ --delete \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" --include "*.js" --include "*.css"
          
          # Verify files were uploaded correctly
          echo "Files uploaded to S3:"
          aws s3 ls s3://$S3_BUCKET/ --recursive | head -20
          
          # Verify index.html is in root for SPA routing
          if aws s3 ls s3://$S3_BUCKET/index.html; then
            echo "SUCCESS: index.html successfully uploaded to S3 root"
          else
            echo "ERROR: index.html not found in S3 root!"
            exit 1
          fi

      # Clear CloudFront cache for immediate deployment visibility
      - name: Invalidate CloudFront Cache
        run: |
          CLOUDFRONT_ID="${{ steps.outputs.outputs.cloudfront_id }}"
          echo "Invalidating CloudFront distribution: $CLOUDFRONT_ID"
          
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "Cache invalidation created: $INVALIDATION_ID"

      # Verify deployment is accessible
      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30
          
          DOMAIN="${{ steps.outputs.outputs.cloudfront_domain }}"
          echo "Testing deployment at: https://$DOMAIN"
          
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN)
          
          if [[ "$RESPONSE_CODE" == "200" ]]; then
            echo "SUCCESS: Application is responding correctly (HTTP $RESPONSE_CODE)"
          else
            echo "WARNING: Application returned HTTP $RESPONSE_CODE (may need propagation time)"
          fi

      # Create deployment summary for GitHub
      - name: Deployment Summary
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Deployment Successful
          
          **Environment:** $ENVIRONMENT  
          **Application URL:** https://${{ steps.outputs.outputs.cloudfront_domain }}  
          **S3 Bucket:** ${{ steps.outputs.outputs.s3_bucket }}  
          **CloudFront ID:** ${{ steps.outputs.outputs.cloudfront_id }}  
          **Branch:** ${{ github.ref_name }}  
          **Commit:** ${{ github.sha }}  
          **Deployed by:** ${{ github.actor }}
          
          ## Resources Status
          All resources managed by Terraform state  
          Infrastructure deployed successfully  
          Angular application deployed to S3 and distributed via CloudFront
          EOF