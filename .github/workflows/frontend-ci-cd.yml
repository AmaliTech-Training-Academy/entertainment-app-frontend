# .github/workflows/frontend-ci-cd.yml

name: CineVerse Frontend CI/CD

env:
  APP_NAME: 'entertainment-app-frontend'

on:
  push:
    branches:
      - dev
      - staging
      - prod
  pull_request:
    branches:
      - dev
      - staging
      - prod

jobs:
  # Job to build and test the Angular application
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'

      - name: Install Frontend Dependencies
        # 'npm ci' is recommended for CI environments for cleaner, reproducible installs
        run: |
          cd frontend
          npm install

      # - name: Run Linter
      #   run: |
      #     cd frontend
      #     npm run lint
      
      - name: Install Chromium for Headless Tests
        # Install Chromium browser, which is necessary for Karma to run tests in a headless environment
        run: sudo apt-get update && sudo apt-get install -y chromium-browser

      # - name: Run Frontend Tests
      #   # Run Angular tests with a headless Chrome browser
      #   # CHROME_BIN environment variable points Karma to the correct Chromium executable
      #   # '--no-watch' prevents Karma from watching files for changes (not needed in CI)
      #   # '--browsers=ChromeHeadless' explicitly tells Karma to use the headless Chrome browser
      #   env:
      #     CHROME_BIN: /usr/bin/chromium-browser
      #   run: |
      #     cd frontend
      #     npm test -- --no-watch --browsers=ChromeHeadless

      - name: Skip Tests Placeholder
        run: |
          echo "Skipping tests: No test files present"


      - name: Build Frontend Application based on branch
        # Build for production, optimizing for deployment
        run: |
          cd frontend
          echo "Building for branch: ${{ github.ref_name }}"
          if [[ "${{ github.ref_name }}" == "dev" ]]; then
            npm run build --configuration=development
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            npm run build --configuration=staging
          elif [[ "${{ github.ref_name }}" == "prod" ]]; then
            npm run build --configuration=production
          else
            echo "Unsupported branch: ${{ github.ref_name }}"
            exit 1
          fi

      - name: Upload Frontend Build Artifact
        # Upload the 'dist' folder as an artifact, to be used by deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/${{ env.APP_NAME }} 


  # Job to deploy to the Staging environment
  deploy:
    # This job depends on the successful completion of the build-and-test job
    needs: build-and-test
    runs-on: ubuntu-latest
    # This job only runs when a push or PR merge occurs on the 'staging' branch
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/prod'
    # Protect the staging environment; requires manual approval or specific secrets setup in GitHub
    environment:
      name: ${{ github.ref_name }}

    steps:
      # Checkout repo
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~> 1.0.0

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Init Terraform and select workspace (dev, staging, prod)
      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init -input=false
          terraform workspace select ${{ github.ref_name }} || terraform workspace new ${{ github.ref_name }}

      # Retrieve outputs dynamically based on workspace
      - name: Retrieve S3 Bucket and CloudFront Info
        id: tf
        working-directory: terraform
        run: |
          BUCKET_NAME=$(terraform output -raw bucket_domain_name)
          CLOUDFRONT_ID=$(terraform output -raw distribution_id)
          CLOUDFRONT_DOMAIN=$(terraform output -raw distribution_domain_name)
          echo "S3_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV
          echo "CLOUDFRONT_DIST_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV
          echo "CLOUDFRONT_DOMAIN=$CLOUDFRONT_DOMAIN" >> $GITHUB_ENV

       # Download the build artifact created by the 'build-and-test' job
      - name: Download Frontend Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: build
      
      # Sync files to S3
      - name: Deploy to S3 Bucket
        run: |
          echo "Deploying to S3 bucket: $S3_BUCKET"
          aws s3 sync build/ s3://$S3_BUCKET --delete

       # Invalidate CloudFront cache
      - name: Invalidate CloudFront Cache
        run: |
          echo "Invalidating CloudFront distribution: $CLOUDFRONT_DIST_ID"
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DIST_ID \
            --paths "/*"

      # Output final application URLs
      - name: Output Application URLs
        run: |
          echo "Application deployed successfully"
          echo "S3 Static Hosting URL:"
          echo "https://$S3_BUCKET.s3-website-${{ secrets.AWS_REGION }}.amazonaws.com"
          echo "CloudFront URL:"
          echo "https://$CLOUDFRONT_DOMAIN"
         
       # Manual approval (only for production)
      - name: Wait for Approval (GitHub Environments handles this)
        if: github.ref == 'refs/heads/prod'
        run: echo "Waiting for manual approval in GitHub before deploying to production..."