# .github/workflows/frontend-ci-cd.yml

name: CineVerse Frontend CI/CD

env:
  ENABLE_CICD: 'false'
  APP_NAME: 'entertainment-app-frontend'

on:
  push:
    branches:
      - dev
      - staging
      - prod
  pull_request:
    branches:
      - dev
      - staging
      - prod

jobs:
  # Job to build and test the Angular application
  build-and-test:
    if: ${{ env.ENABLE_CICD == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'

      - name: Install Frontend Dependencies
        # 'npm ci' is recommended for CI environments for cleaner, reproducible installs
        run: npm ci

      # - name: Run Linter (Optional)
        # Uncomment when ready
        # run: npm run lint
      
      - name: Install Chromium for Headless Tests
        # Install Chromium browser, which is necessary for Karma to run tests in a headless environment
        run: sudo apt-get update && sudo apt-get install -y chromium-browser

      # - name: Run Frontend Tests
      #   # Run Angular tests with a headless Chrome browser
      #   # CHROME_BIN environment variable points Karma to the correct Chromium executable
      #   # '--no-watch' prevents Karma from watching files for changes (not needed in CI)
      #   # '--browsers=ChromeHeadless' explicitly tells Karma to use the headless Chrome browser
      #   env:
      #     CHROME_BIN: /usr/bin/chromium-browser
      #   run: npm test -- --no-watch --browsers=ChromeHeadless

      - name: Skip Tests Placeholder
        run: |
          echo "Skipping tests: No test files present"


      - name: Build Angular Application
        # Build for production, optimizing for deployment
        run: |
          echo "Building for branch: ${{ github.ref_name }}"
          if [[ "${{ github.ref_name }}" == "dev" ]]; then
            npm run build --configuration=development
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            npm run build --configuration=staging
          elif [[ "${{ github.ref_name }}" == "prod" ]]; then
            npm run build --configuration=production
          else
            echo "Unsupported branch: ${{ github.ref_name }}"
            exit 1
          fi

      - name: Upload Frontend Build Artifact
        # Upload the 'dist' folder as an artifact, to be used by deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/${{ env.APP_NAME }} 


  # Job to deploy to the Staging environment
  deploy-staging:
    # This job depends on the successful completion of the build-and-test job
    needs: build-and-test
    runs-on: ubuntu-latest
    # This job only runs when a push or PR merge occurs on the 'staging' branch
    if: github.ref == 'refs/heads/staging'
    # Protect the staging environment; requires manual approval or specific secrets setup in GitHub
    environment:
      name: staging

    steps:
      - name: Download Frontend Build Artifact
        # Download the build artifact created by the 'build-and-test' job
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist # The build will be downloaded to a 'dist' folder here

      - name: Deploy to Staging (Placeholder)
        # This is a placeholder step. Replace with your actual deployment commands later.
        run: |
          echo "Placeholder: Deploying CineVerse Frontend to Staging environment."
          echo "Build artifacts located at: ./dist/${{ env.APP_NAME }}"
          echo "Staging deployment placeholder complete."


  # Job to deploy to the Production environment
  deploy-prod:
    # This job depends on the successful completion of the build-and-test job
    needs: build-and-test
    runs-on: ubuntu-latest
    # This job only runs when a push or PR merge occurs on the 'prod' branch
    if: github.ref == 'refs/heads/prod'
    # Protect the production environment; typically requires manual approval and specific secrets
    environment:
      name: production

    steps:
      - name: Download Frontend Build Artifact
        # Download the build artifact created by the 'build-and-test' job
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./dist # The build will be downloaded to a 'dist' folder here

      - name: Deploy to Production (Placeholder)
        # This is a placeholder step. Replace with your actual deployment commands later.
        run: |
          echo "Placeholder: Deploying CineVerse Frontend to Production environment."
          echo "Build artifacts located at: ./dist/${{ env.APP_NAME }}"
          echo "Production deployment placeholder complete."
