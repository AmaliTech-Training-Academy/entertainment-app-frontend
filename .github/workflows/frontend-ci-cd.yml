name: CineVerse Frontend CI/CD

env:
  APP_NAME: 'entertainment-app-frontend'
  AWS_REGION: 'eu-west-1'
  TERRAFORM_VERSION: '1.6.0'
  NODE_VERSION: '18'

on:
  push:
    branches: [dev, staging, prod]
    paths: ['frontend/**', 'terraform/**', '.github/workflows/frontend-ci-cd.yml']
  pull_request:
    branches: [dev, staging, prod]
    paths: ['frontend/**', 'terraform/**']

jobs:
  # =============================================================================
  # Environment Configuration
  # =============================================================================
  setup:
    name: Setup Environment
    runs-on: self-hosted
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      should_deploy: ${{ steps.config.outputs.should_deploy }}
      is_production: ${{ steps.config.outputs.is_production }}
    steps:
      - name: Configure Environment
        id: config
        run: |
          BRANCH="${{ github.ref_name }}"
          
          # Set environment based on branch
          if [[ "$BRANCH" == "prod" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "is_production=true" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
          fi
          
          # Only deploy on push to main branches
          if [[ "${{ github.event_name }}" == "push" && "$BRANCH" =~ ^(dev|staging|prod)$ ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security:
    name: Security Scan
    runs-on: self-hosted
    needs: setup
    if: always() && (github.event_name == 'pull_request' || needs.setup.outputs.is_production == 'true')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: NPM Security Audit
        working-directory: frontend
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform/
          format: sarif
          soft_fail: true

      - name: Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.sha }}
          path: frontend/npm-audit-report.json
          retention-days: 30

  # =============================================================================
  # Build and Test
  # =============================================================================
  build:
    name: Build & Test
    runs-on: self-hosted
    needs: [setup]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: Create Environment Files
        working-directory: frontend/src/environments
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          
          # Create base environment file
          cat > environment.ts << 'EOF'
          export const environment = {
            production: false,
            apiUrl: 'http://localhost:3000/api'
          };
          EOF
          
          # Create environment-specific files
          case "$ENV" in
            "dev")
              cat > environment.dev.ts << 'EOF'
          export const environment = {
            production: false,
            apiUrl: 'https://api-dev.cineverse.com/api'
          };
          EOF
              ;;
            "staging")
              cat > environment.staging.ts << 'EOF'
          export const environment = {
            production: false,
            apiUrl: 'https://api-staging.cineverse.com/api'
          };
          EOF
              ;;
            "prod")
              cat > environment.prod.ts << 'EOF'
          export const environment = {
            production: true,
            apiUrl: 'https://api.cineverse.com/api'
          };
          EOF
              ;;
          esac

      - name: Build Application
        working-directory: frontend
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          echo "Building for environment: $ENV"
          
          case "$ENV" in
            "dev")     npm run build -- --configuration=development ;;
            "staging") npm run build -- --configuration=staging ;;
            "prod")    npm run build -- --configuration=production ;;
            *)         echo "Unknown environment: $ENV" && exit 1 ;;
          esac
          
          echo "Build completed successfully"
          
          # Verify build output
          if [ -d "dist/${{ env.APP_NAME }}" ]; then
            echo "✅ Build output found in dist/${{ env.APP_NAME }}"
            ls -la "dist/${{ env.APP_NAME }}"
          else
            echo "❌ Build output not found"
            ls -la dist/
            exit 1
          fi

      - name: Run Tests
        working-directory: frontend
        run: |
          npm test -- --watch=false --browsers=ChromeHeadless
        continue-on-error: true

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ needs.setup.outputs.environment }}
          path: frontend/dist/${{ env.APP_NAME }}
          retention-days: 7

  # =============================================================================
  # Infrastructure Planning
  # =============================================================================
  plan:
    name: Infrastructure Plan
    runs-on: self-hosted
    needs: [setup, build]
    if: always() && needs.build.result == 'success'
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Environment Configuration
        working-directory: terraform
        run: |
          mkdir -p environments/$ENVIRONMENT
          
          # Create backend configuration
          cat > environments/$ENVIRONMENT/backend.hcl << EOF
          bucket = "cineverse-terraform-state-$ENVIRONMENT"
          key    = "frontend/terraform.tfstate"
          region = "${{ env.AWS_REGION }}"
          EOF
          
          # Create terraform variables
          cat > environments/$ENVIRONMENT/terraform.tfvars << EOF
          environment = "$ENVIRONMENT"
          app_name    = "${{ env.APP_NAME }}"
          aws_region  = "${{ env.AWS_REGION }}"
          
          # Environment-specific settings
          domain_name = "$ENVIRONMENT.cineverse.com"
          
          tags = {
            Environment = "$ENVIRONMENT"
            Project     = "CineVerse"
            ManagedBy   = "Terraform"
          }
          EOF

      - name: Create S3 Backend Bucket
        run: |
          BUCKET_NAME="cineverse-terraform-state-$ENVIRONMENT"
          
          # Check if bucket exists, create if not
          if ! aws s3 ls "s3://$BUCKET_NAME" >/dev/null 2>&1; then
            echo "Creating S3 bucket: $BUCKET_NAME"
            aws s3 mb "s3://$BUCKET_NAME" --region ${{ env.AWS_REGION }}
            
            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket "$BUCKET_NAME" \
              --versioning-configuration Status=Enabled
              
            # Enable encryption
            aws s3api put-bucket-encryption \
              --bucket "$BUCKET_NAME" \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'
          fi

      - name: Terraform Init & Validate
        working-directory: terraform
        run: |
          terraform init -backend-config="environments/$ENVIRONMENT/backend.hcl"
          terraform validate
          
          # Show current state summary
          RESOURCE_COUNT=$(terraform state list 2>/dev/null | wc -l)
          echo "Current state contains $RESOURCE_COUNT resources"

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file="environments/$ENVIRONMENT/terraform.tfvars" \
            -out="$ENVIRONMENT.tfplan" \
            -detailed-exitcode
          
          echo "PLAN_EXIT_CODE=$?" >> $GITHUB_ENV

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        if: env.PLAN_EXIT_CODE == '2'
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: terraform/${{ env.ENVIRONMENT }}.tfplan
          retention-days: 7

  # =============================================================================
  # Deployment
  # =============================================================================
  deploy:
    name: Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: self-hosted
    needs: [setup, plan]
    if: needs.setup.outputs.should_deploy == 'true' && needs.plan.result == 'success'
    environment: ${{ needs.setup.outputs.environment }}
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Recreate Environment Configuration
        working-directory: terraform
        run: |
          mkdir -p environments/$ENVIRONMENT
          
          # Recreate backend configuration
          cat > environments/$ENVIRONMENT/backend.hcl << EOF
          bucket = "cineverse-terraform-state-$ENVIRONMENT"
          key    = "frontend/terraform.tfstate"
          region = "${{ env.AWS_REGION }}"
          EOF
          
          # Recreate terraform variables
          cat > environments/$ENVIRONMENT/terraform.tfvars << EOF
          environment = "$ENVIRONMENT"
          app_name    = "${{ env.APP_NAME }}"
          aws_region  = "${{ env.AWS_REGION }}"
          
          # Environment-specific settings
          domain_name = "$ENVIRONMENT.cineverse.com"
          
          tags = {
            Environment = "$ENVIRONMENT"
            Project     = "CineVerse"
            ManagedBy   = "Terraform"
          }
          EOF

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -backend-config="environments/$ENVIRONMENT/backend.hcl"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: terraform/

      - name: Apply Infrastructure Changes
        working-directory: terraform
        run: |
          if [[ -f "$ENVIRONMENT.tfplan" ]]; then
            echo "Applying existing plan"
            terraform apply -auto-approve "$ENVIRONMENT.tfplan"
          else
            echo "Creating and applying new plan"
            terraform apply -auto-approve -var-file="environments/$ENVIRONMENT/terraform.tfvars"
          fi

      - name: Get Infrastructure Outputs
        id: outputs
        working-directory: terraform
        run: |
          {
            echo "s3_bucket=$(terraform output -raw s3_bucket_name)"
            echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)"
            echo "cloudfront_domain=$(terraform output -raw cloudfront_domain_name)"
          } >> $GITHUB_OUTPUT

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ env.ENVIRONMENT }}
          path: build

      - name: Deploy to S3
        run: |
          S3_BUCKET="${{ steps.outputs.outputs.s3_bucket }}"
          
          echo "Deploying to S3 bucket: $S3_BUCKET"
          
          # Verify build contents
          echo "Build contents:"
          ls -la build/
          
          # Deploy with appropriate cache headers
          aws s3 sync build/ s3://$S3_BUCKET/ --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" --exclude "*.js" --exclude "*.css"
          
          aws s3 sync build/ s3://$S3_BUCKET/ --delete \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" --include "*.js" --include "*.css"

      - name: Invalidate CloudFront Cache
        run: |
          CLOUDFRONT_ID="${{ steps.outputs.outputs.cloudfront_id }}"
          echo "Invalidating CloudFront distribution: $CLOUDFRONT_ID"
          
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "Cache invalidation created: $INVALIDATION_ID"

      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30
          
          DOMAIN="${{ steps.outputs.outputs.cloudfront_domain }}"
          echo "Testing deployment at: https://$DOMAIN"
          
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN)
          
          if [[ "$RESPONSE_CODE" == "200" ]]; then
            echo "✅ Application is responding correctly (HTTP $RESPONSE_CODE)"
          else
            echo "⚠️  Application returned HTTP $RESPONSE_CODE (may need propagation time)"
          fi

      - name: Deployment Summary
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # 🚀 Deployment Successful
          
          **Environment:** $ENVIRONMENT  
          **Application URL:** https://${{ steps.outputs.outputs.cloudfront_domain }}  
          **S3 Bucket:** ${{ steps.outputs.outputs.s3_bucket }}  
          **CloudFront ID:** ${{ steps.outputs.outputs.cloudfront_id }}  
          **Branch:** ${{ github.ref_name }}  
          **Commit:** ${{ github.sha }}  
          **Deployed by:** ${{ github.actor }}
          EOF