
name: CineVerse Frontend CI/CD

env:
  APP_NAME: 'entertainment-app-frontend'
  AWS_REGION: 'eu-west-1'
  TERRAFORM_VERSION: '1.9.8'
  NODE_VERSION: '18'

on:
  push:
    branches: [dev, staging, prod]
    paths: ['frontend/**', 'terraform/**', '.github/workflows/frontend-ci-cd.yml']
  pull_request:
    branches: [dev, staging, prod]
    paths: ['frontend/**', 'terraform/**']

jobs:
  # =============================================================================
  # Environment Configuration
  # =============================================================================
  setup:
    name: Setup Environment
    runs-on: self-hosted
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      should_deploy: ${{ steps.config.outputs.should_deploy }}
      is_production: ${{ steps.config.outputs.is_production }}
    steps:
      - name: Configure Environment
        id: config
        run: |
          BRANCH="${{ github.ref_name }}"
          EVENT_NAME="${{ github.event_name }}"
          
          echo "Environment Detection:"
          echo "Branch: $BRANCH"
          echo "Event: $EVENT_NAME"
          
          # Set environment based on branch
          if [[ "$BRANCH" == "prod" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "is_production=true" >> $GITHUB_OUTPUT
            echo "Environment set to: prod (production)"
            ENV_NAME="prod"
          elif [[ "$BRANCH" == "staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
            echo "Environment set to: staging"
            ENV_NAME="staging"
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
            echo "Environment set to: dev (default)"
            ENV_NAME="dev"
          fi
          
          # Only deploy on push to main branches
          if [[ "$EVENT_NAME" == "push" && "$BRANCH" =~ ^(dev|staging|prod)$ ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "Deployment enabled for push to $BRANCH"
            SHOULD_DEPLOY="true"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "Deployment disabled (event: $EVENT_NAME, branch: $BRANCH)"
            SHOULD_DEPLOY="false"
          fi
          
          echo ""
          echo "Final Configuration:"
          echo "Environment: $ENV_NAME"
          echo "Should Deploy: $SHOULD_DEPLOY"
          echo "Is Production: $([ "$BRANCH" == "prod" ] && echo "true" || echo "false")"

  # =============================================================================
  # Security Scanning
  # =============================================================================
  security:
    name: Security Scan
    runs-on: self-hosted
    needs: setup
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: NPM Security Audit
        working-directory: frontend
        run: |
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          npm audit --audit-level=moderate
        continue-on-error: true

      - name: Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform/
          format: sarif
          soft_fail: true

      - name: Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.sha }}
          path: frontend/npm-audit-report.json
          retention-days: 30

  # =============================================================================
  # Build and Test
  # =============================================================================
  build:
    name: Build & Test
    runs-on: self-hosted
    needs: [setup]
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        working-directory: frontend
        run: npm ci

      - name: Create Environment Files
        working-directory: frontend/src/environments
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          
          # Create base environment file
          cat > environment.ts << 'EOF'
          export const environment = {
            production: false,
            apiUrl: 'http://localhost:3000/api'
          };
          EOF
          
          # Create environment-specific files
          case "$ENV" in
            "dev")
              cat > environment.dev.ts << 'EOF'
          export const environment = {
            production: false,
            apiUrl: 'https://api-dev.cineverse.com/api'
          };
          EOF
              ;;
            "staging")
              cat > environment.staging.ts << 'EOF'
          export const environment = {
            production: false,
            apiUrl: 'https://api-staging.cineverse.com/api'
          };
          EOF
              ;;
            "prod")
              cat > environment.prod.ts << 'EOF'
          export const environment = {
            production: true,
            apiUrl: 'https://api.cineverse.com/api'
          };
          EOF
              ;;
          esac

      - name: Build Application
        working-directory: frontend
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          echo "Building for environment: $ENV"
          
          case "$ENV" in
            "dev")     npm run build -- --configuration=development ;;
            "staging") npm run build -- --configuration=staging ;;
            "prod")    npm run build -- --configuration=production ;;
            *)         echo "Unknown environment: $ENV" && exit 1 ;;
          esac
          
          echo "Build completed successfully"
          
          # Verify build output
          if [ -d "dist/${{ env.APP_NAME }}" ]; then
            echo "Build output found in dist/${{ env.APP_NAME }}"
            ls -la "dist/${{ env.APP_NAME }}"
          else
            echo "Build output not found"
            ls -la dist/
            exit 1
          fi

      - name: Run Tests
        working-directory: frontend
        run: |
          npm test -- --watch=false --browsers=ChromeHeadless
        continue-on-error: true

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ needs.setup.outputs.environment }}
          path: frontend/dist/${{ env.APP_NAME }}
          retention-days: 7

  # =============================================================================
  # Infrastructure Planning
  # =============================================================================
  plan:
    name: Infrastructure Plan
    runs-on: self-hosted
    needs: [setup, build]
    if: always() && needs.build.result == 'success'
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    outputs:
      plan_changes: ${{ steps.plan.outputs.plan_changes }}
      plan_exitcode: ${{ steps.plan.outputs.plan_exitcode }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Debug Environment
        run: |
          echo "Plan Job Environment Debug:"
          echo "ENVIRONMENT (from env): $ENVIRONMENT"
          echo "setup.outputs.environment: ${{ needs.setup.outputs.environment }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "should_deploy: ${{ needs.setup.outputs.should_deploy }}"
          echo "is_production: ${{ needs.setup.outputs.is_production }}"
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Environment Configuration
        working-directory: terraform
        run: |
          echo "Creating configuration for environment: $ENVIRONMENT"
          mkdir -p environments/$ENVIRONMENT
          
          # Create backend configuration
          cat > environments/$ENVIRONMENT/backend.hcl << EOF
          bucket         = "cineverse-terraform-state-$ENVIRONMENT"
          key            = "frontend/$ENVIRONMENT/terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          encrypt        = true
          dynamodb_table = "cineverse-terraform-locks"
          EOF
          
          # Determine WAF setting based on environment
          if [[ "$ENVIRONMENT" == "dev" ]]; then
            WAF_ENABLED="false"
            DOMAIN_NAME='""'
          else
            WAF_ENABLED="true"
            DOMAIN_NAME='"'$ENVIRONMENT'.cineverse.com"'
          fi
          
          echo "WAF Enabled: $WAF_ENABLED"
          echo "Domain Name: $DOMAIN_NAME"
          
          # Create terraform variables
          cat > environments/$ENVIRONMENT/terraform.tfvars << EOF
          environment      = "$ENVIRONMENT"
          project_name     = "cineverse"
          aws_region       = "${{ env.AWS_REGION }}"
          enable_waf       = $WAF_ENABLED
          enable_monitoring = true
          
          # Domain configuration
          domain_name = $DOMAIN_NAME
          
          # API endpoint
          api_endpoint = "https://api-$ENVIRONMENT.cineverse.com"
          EOF
          
          echo "Created terraform.tfvars:"
          cat environments/$ENVIRONMENT/terraform.tfvars
          
          echo ""
          echo "Created backend.hcl:"
          cat environments/$ENVIRONMENT/backend.hcl

      - name: Terraform Init & Validate
        working-directory: terraform
        run: |
          echo "Initializing Terraform for environment: $ENVIRONMENT"
          
          terraform init -backend-config="environments/$ENVIRONMENT/backend.hcl" || {
            echo "Terraform init failed. Checking S3 bucket and DynamoDB table..."
            aws s3 ls s3://cineverse-terraform-state-$ENVIRONMENT || echo "S3 bucket cineverse-terraform-state-$ENVIRONMENT not found"
            aws dynamodb describe-table --table-name cineverse-terraform-locks --region ${{ env.AWS_REGION }} || echo "DynamoDB table cineverse-terraform-locks not found"
            exit 1
          }
          
          terraform validate
          
          # Show current state summary
          RESOURCE_COUNT=$(terraform state list 2>/dev/null | wc -l || echo 0)
          echo "Current state contains $RESOURCE_COUNT resources"
          
          if [[ $RESOURCE_COUNT -gt 0 ]]; then
            echo "Current resources in state:"
            terraform state list | head -10
            if [[ $RESOURCE_COUNT -gt 10 ]]; then
              echo "... and $((RESOURCE_COUNT - 10)) more"
            fi
          fi

      - name: Force Unlock Terraform State
        working-directory: terraform
        run: |
          echo "Checking for existing state locks..."
          
          # Capture plan output to check for lock
          PLAN_OUTPUT=$(terraform plan -var-file="environments/$ENVIRONMENT/terraform.tfvars" -detailed-exitcode 2>&1 || true)
          PLAN_EXIT_CODE=$?
          
          if [[ $PLAN_EXIT_CODE -eq 2 && "$PLAN_OUTPUT" =~ "Lock Info" ]]; then
            echo "State appears to be locked. Attempting to force unlock..."
            LOCK_ID=$(echo "$PLAN_OUTPUT" | grep -oE 'ID:[[:space:]]*[a-f0-9-]{36}' | awk '{print $2}')
            if [[ -n "$LOCK_ID" ]]; then
              echo "Force unlocking with ID: $LOCK_ID"
              terraform force-unlock -force "$LOCK_ID" || echo "Force unlock failed or not needed"
            else
              echo "Could not extract lock ID"
            fi
          else
            echo "No state lock detected or plan failed for other reasons"
          fi

      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: |
          echo "Creating Terraform plan for environment: $ENVIRONMENT"
          
          # Set tags via environment variables
          export TF_VAR_tags='{
            "Environment": "'$ENVIRONMENT'",
            "Project": "CineVerse",
            "ManagedBy": "Terraform",
            "Branch": "${{ github.ref_name }}",
            "CommitSHA": "${{ github.sha }}",
            "DeployedBy": "${{ github.actor }}",
            "DeployedAt": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
          }'
          
          # Check if state file exists and has resources
          RESOURCE_COUNT=$(terraform state list 2>/dev/null | wc -l || echo 0)
          echo "Current state contains $RESOURCE_COUNT resources"
          
          terraform plan \
            -var-file="environments/$ENVIRONMENT/terraform.tfvars" \
            -out="$ENVIRONMENT.tfplan" \
            -detailed-exitcode
          
          PLAN_EXIT_CODE=$?
          echo "plan_exitcode=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [[ $RESOURCE_COUNT -eq 0 ]]; then
            echo "State is empty - forcing plan creation for initial deployment"
            echo "plan_changes=true" >> $GITHUB_OUTPUT
          elif [[ $PLAN_EXIT_CODE -eq 0 ]]; then
            echo "No changes needed - infrastructure is up to date"
            echo "plan_changes=false" >> $GITHUB_OUTPUT
          elif [[ $PLAN_EXIT_CODE -eq 1 ]]; then
            echo "Terraform plan failed"
            echo "plan_changes=error" >> $GITHUB_OUTPUT
            exit 1
          elif [[ $PLAN_EXIT_CODE -eq 2 ]]; then
            echo "Changes detected - plan created successfully"
            echo "plan_changes=true" >> $GITHUB_OUTPUT
          fi
          
          # Verify plan file exists
          if [[ -f "$ENVIRONMENT.tfplan" ]]; then
            echo "Plan file created: $ENVIRONMENT.tfplan"
          else
            echo "WARNING: Plan file $ENVIRONMENT.tfplan not created"
          fi

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        if: steps.plan.outputs.plan_changes == 'true'
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: terraform/${{ env.ENVIRONMENT }}.tfplan
          retention-days: 7

  # =============================================================================
  # Deployment
  # =============================================================================
  deploy:
    name: Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: self-hosted
    needs: [setup, plan]
    if: needs.setup.outputs.should_deploy == 'true' && needs.plan.result == 'success'
    environment: ${{ needs.setup.outputs.environment }}
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Recreate Environment Configuration
        working-directory: terraform
        run: |
          echo "Recreating configuration for environment: $ENVIRONMENT"
          mkdir -p environments/$ENVIRONMENT
          
          # Recreate backend configuration
          cat > environments/$ENVIRONMENT/backend.hcl << EOF
          bucket         = "cineverse-terraform-state-$ENVIRONMENT"
          key            = "frontend/$ENVIRONMENT/terraform.tfstate"
          region         = "${{ env.AWS_REGION }}"
          encrypt        = true
          dynamodb_table = "cineverse-terraform-locks"
          EOF
          
          # Determine WAF setting based on environment
          if [[ "$ENVIRONMENT" == "dev" ]]; then
            WAF_ENABLED="false"
            DOMAIN_NAME='""'
          else
            WAF_ENABLED="true"
            DOMAIN_NAME='"'$ENVIRONMENT'.cineverse.com"'
          fi
          
          # Recreate terraform variables
          cat > environments/$ENVIRONMENT/terraform.tfvars << EOF
          environment      = "$ENVIRONMENT"
          project_name     = "cineverse"
          aws_region       = "${{ env.AWS_REGION }}"
          enable_waf       = $WAF_ENABLED
          enable_monitoring = true
          
          # Domain configuration
          domain_name = $DOMAIN_NAME
          
          # API endpoint
          api_endpoint = "https://api-$ENVIRONMENT.cineverse.com"
          EOF
          
          echo "Created terraform.tfvars:"
          cat environments/$ENVIRONMENT/terraform.tfvars
          
          echo ""
          echo "Created backend.hcl:"
          cat environments/$ENVIRONMENT/backend.hcl

      - name: Terraform Init
        working-directory: terraform
        run: |
          echo "Initializing Terraform for environment: $ENVIRONMENT"
          terraform init -backend-config="environments/$ENVIRONMENT/backend.hcl" || {
            echo "Terraform init failed. Checking S3 bucket and DynamoDB table..."
            aws s3 ls s3://cineverse-terraform-state-$ENVIRONMENT || echo "S3 bucket cineverse-terraform-state-$ENVIRONMENT not found"
            aws dynamodb describe-table --table-name cineverse-terraform-locks --region ${{ env.AWS_REGION }} || echo "DynamoDB table cineverse-terraform-locks not found"
            exit 1
          }

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        if: needs.plan.outputs.plan_changes == 'true'
        continue-on-error: true
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: terraform/

      - name: Apply Infrastructure Changes
        working-directory: terraform
        run: |
          # Set tags via environment variables
          export TF_VAR_tags='{
            "Environment": "'$ENVIRONMENT'",
            "Project": "CineVerse",
            "ManagedBy": "Terraform",
            "Branch": "${{ github.ref_name }}",
            "CommitSHA": "${{ github.sha }}",
            "DeployedBy": "${{ github.actor }}",
            "DeployedAt": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
          }'
          
          # Check if state file exists and has resources
          RESOURCE_COUNT=$(terraform state list 2>/dev/null | wc -l || echo 0)
          echo "Current state contains $RESOURCE_COUNT resources"
          echo "Plan changes: ${{ needs.plan.outputs.plan_changes }}"
          echo "Plan file exists: $([[ -f "$ENVIRONMENT.tfplan" ]] && echo 'yes' || echo 'no')"
          
          if [[ $RESOURCE_COUNT -eq 0 ]]; then
            echo "State file is empty - creating new resources"
            terraform apply -auto-approve -var-file="environments/$ENVIRONMENT/terraform.tfvars" || {
              echo "ERROR: Terraform apply failed"
              terraform plan -var-file="environments/$ENVIRONMENT/terraform.tfvars" -out="$ENVIRONMENT.tfplan" -detailed-exitcode
              echo "Plan exit code: $?"
              exit 1
            }
          elif [[ "${{ needs.plan.outputs.plan_changes }}" == "true" && -f "$ENVIRONMENT.tfplan" ]]; then
            echo "Applying existing plan with changes"
            terraform apply -auto-approve "$ENVIRONMENT.tfplan" || {
              echo "ERROR: Terraform apply failed for plan"
              exit 1
            }
          elif [[ "${{ needs.plan.outputs.plan_changes }}" == "false" ]]; then
            echo "No changes needed - infrastructure is up to date"
            echo "Skipping terraform apply"
          else
            echo "Unexpected state - creating and applying new plan"
            terraform apply -auto-approve -var-file="environments/$ENVIRONMENT/terraform.tfvars" || {
              echo "ERROR: Terraform apply failed"
              exit 1
            }
          fi
          
          # Verify state file after apply
          NEW_RESOURCE_COUNT=$(terraform state list 2>/dev/null | wc -l || echo 0)
          echo "State now contains $NEW_RESOURCE_COUNT resources"
          if [[ $NEW_RESOURCE_COUNT -eq 0 ]]; then
            echo "ERROR: Terraform apply did not create any resources"
            terraform state list 2>&1 || echo "No state file or empty state"
            exit 1
          fi
          
          # Debug outputs
          echo "Available outputs after apply:"
          terraform output -json || echo "No outputs available"

      - name: Get Infrastructure Outputs
        id: outputs
        working-directory: terraform
        run: |
          {
            S3_OUTPUT=$(terraform output -raw s3_bucket_name 2>&1)
            if [[ "$S3_OUTPUT" =~ "No outputs found" || -z "$S3_OUTPUT" ]]; then
              echo "s3_bucket=ERROR: s3_bucket_name not found" >> $GITHUB_OUTPUT
            else
              echo "s3_bucket=$S3_OUTPUT" >> $GITHUB_OUTPUT
            fi
            
            CF_ID_OUTPUT=$(terraform output -raw cloudfront_distribution_id 2>&1)
            if [[ "$CF_ID_OUTPUT" =~ "No outputs found" || -z "$CF_ID_OUTPUT" ]]; then
              echo "cloudfront_id=ERROR: cloudfront_distribution_id not found" >> $GITHUB_OUTPUT
            else
              echo "cloudfront_id=$CF_ID_OUTPUT" >> $GITHUB_OUTPUT
            fi
            
            CF_DOMAIN_OUTPUT=$(terraform output -raw cloudfront_domain_name 2>&1)
            if [[ "$CF_DOMAIN_OUTPUT" =~ "No outputs found" || -z "$CF_DOMAIN_OUTPUT" ]]; then
              echo "cloudfront_domain=ERROR: cloudfront_domain_name not found" >> $GITHUB_OUTPUT
            else
              echo "cloudfront_domain=$CF_DOMAIN_OUTPUT" >> $GITHUB_OUTPUT
            fi
          } >> $GITHUB_OUTPUT

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ env.ENVIRONMENT }}
          path: build

      - name: Deploy to S3
        run: |
          S3_BUCKET="${{ steps.outputs.outputs.s3_bucket }}"
          
          if [[ "$S3_BUCKET" == "ERROR: s3_bucket_name not found" ]]; then
            echo "ERROR: S3 bucket name not found. Cannot deploy."
            exit 1
          fi
          
          echo "Deploying to S3 bucket: $S3_BUCKET"
          
          # Verify build contents
          echo "Build contents:"
          ls -la build/
          
          # For Angular SSR, the client files are in browser/ subdirectory
          if [ -d "build/browser" ]; then
            echo "Angular SSR detected - deploying from browser/ directory"
            DEPLOY_PATH="build/browser"
          elif [ -f "build/index.html" ]; then
            echo "Standard Angular build detected"
            DEPLOY_PATH="build"
          else
            echo "ERROR: Neither build/browser nor build/index.html found!"
            echo "Available directories:"
            find build/ -type d
            echo "Available files:"
            find build/ -name "*.html"
            exit 1
          fi
          
          echo "Deploying from: $DEPLOY_PATH"
          echo "Contents of deploy directory:"
          ls -la "$DEPLOY_PATH"
          
          # Verify index.html exists in deploy path
          if [ ! -f "$DEPLOY_PATH/index.html" ]; then
            echo "ERROR: index.html not found in $DEPLOY_PATH"
            exit 1
          fi
          
          # Deploy with appropriate cache headers
          echo "Syncing files to S3..."
          
          # First sync: everything except HTML/JS/CSS with long cache
          aws s3 sync "$DEPLOY_PATH/" s3://$S3_BUCKET/ --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" --exclude "*.js" --exclude "*.css"
          
          # Second sync: HTML/JS/CSS with short cache
          aws s3 sync "$DEPLOY_PATH/" s3://$S3_BUCKET/ --delete \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" --include "*.js" --include "*.css"
          
          # Verify files were uploaded correctly
          echo "Files uploaded to S3:"
          aws s3 ls s3://$S3_BUCKET/ --recursive | head -20
          
          # Verify index.html is in root
          if aws s3 ls s3://$S3_BUCKET/index.html; then
            echo "index.html successfully uploaded to S3 root"
          else
            echo "index.html not found in S3 root!"
            exit 1
          fi

      - name: Invalidate CloudFront Cache
        run: |
          CLOUDFRONT_ID="${{ steps.outputs.outputs.cloudfront_id }}"
          if [[ "$CLOUDFRONT_ID" == "ERROR: cloudfront_distribution_id not found" ]]; then
            echo "ERROR: CloudFront distribution ID not found. Skipping cache invalidation."
            exit 1
          fi
          echo "Invalidating CloudFront distribution: $CLOUDFRONT_ID"
          
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "Cache invalidation created: $INVALIDATION_ID"

      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30
          
          DOMAIN="${{ steps.outputs.outputs.cloudfront_domain }}"
          if [[ "$DOMAIN" == "ERROR: cloudfront_domain_name not found" ]]; then
            echo "ERROR: CloudFront domain not found. Cannot verify deployment."
            exit 1
          fi
          
          echo "Testing deployment at: https://$DOMAIN"
          
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN)
          
          if [[ "$RESPONSE_CODE" == "200" ]]; then
            echo "Application is responding correctly (HTTP $RESPONSE_CODE)"
          else
            echo "Application returned HTTP $RESPONSE_CODE (may need propagation time)"
          fi

      - name: Deployment Summary
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Deployment Successful
          
          **Environment:** $ENVIRONMENT  
          **Application URL:** https://${{ steps.outputs.outputs.cloudfront_domain }}  
          **S3 Bucket:** ${{ steps.outputs.outputs.s3_bucket }}  
          **CloudFront ID:** ${{ steps.outputs.outputs.cloudfront_id }}  
          **Branch:** ${{ github.ref_name }}  
          **Commit:** ${{ github.sha }}  
          **Deployed by:** ${{ github.actor }}
          EOF
