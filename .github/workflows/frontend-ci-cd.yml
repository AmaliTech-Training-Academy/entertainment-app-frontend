
name: CineVerse Frontend CI/CD

env:
  APP_NAME: 'entertainment-app-frontend'
  AWS_REGION: 'eu-west-1'
  TERRAFORM_VERSION: '1.6.0'
  NODE_VERSION: '18'

on:
  push:
    branches: [dev, staging, prod]
    paths: ['frontend/**', 'terraform/**', '.github/workflows/frontend-ci-cd.yml']
  pull_request:
    branches: [dev, staging, prod]
    paths: ['frontend/**', 'terraform/**']

jobs:
  # =============================================================================
  # Environment Configuration
  # =============================================================================
  setup:
    name: Setup Environment
    runs-on: self-hosted
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      should_deploy: ${{ steps.config.outputs.should_deploy }}
      is_production: ${{ steps.config.outputs.is_production }}
    steps:
      - name: Configure Environment
        id: config
        run: |
          BRANCH="${{ github.ref_name }}"
          
          # Set environment based on branch
          if [[ "$BRANCH" == "prod" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "is_production=true" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH" == "staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "is_production=false" >> $GITHUB_OUTPUT
          fi
          
          # Only deploy on push to main branches
          if [[ "${{ github.event_name }}" == "push" && "$BRANCH" =~ ^(dev|staging|prod)$ ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # =============================================================================
  # Security Scanning
  # =============================================================================
  # security:
  #   name: Security Scan
  #   runs-on: self-hosted
  #   needs: setup
  #   if: github.event_name == 'pull_request' || needs.setup.outputs.is_production == 'true'
  #   steps:
  #     - uses: actions/checkout@v4
      
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'
  #         cache-dependency-path: frontend/package-lock.json

  #     - name: Install Dependencies
  #       run: cd frontend && npm ci

  #     - name: NPM Security Audit
  #       working-directory: frontend
  #       run: |
  #         npm audit --audit-level=moderate --json > npm-audit-report.json || true
  #         npm audit --audit-level=moderate
  #       continue-on-error: true

  #     - name: Terraform Security Scan
  #       uses: aquasecurity/tfsec-action@v1.0.0
  #       with:
  #         working_directory: terraform/
  #         format: sarif
  #         soft_fail: true

  #     - name: Secret Detection
  #       uses: gitleaks/gitleaks-action@v2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       continue-on-error: true

  #     - name: Upload Security Reports
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: security-reports-${{ github.sha }}
  #         path: frontend/npm-audit-report.json
  #         retention-days: 30

  # =============================================================================
  # Build and Test
  # =============================================================================
  build:
    name: Build & Test
    runs-on: self-hosted
    needs: [setup, security]
    if: always() && (needs.security.result == 'success' || needs.security.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: cd frontend && npm install

      - name: Build Application
        working-directory: frontend
        run: |
          ENV="${{ needs.setup.outputs.environment }}"
          echo "Building for environment: $ENV"
          
          case "$ENV" in
            "dev")     npm run build -- --configuration=development ;;
            "staging") npm run build -- --configuration=staging ;;
            "prod")    npm run build -- --configuration=production ;;
            *)         echo "Unknown environment: $ENV" && exit 1 ;;
          esac
          
          echo "Build completed successfully"

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ needs.setup.outputs.environment }}
          path: frontend/dist/${{ env.APP_NAME }}
          retention-days: 7

  # =============================================================================
  # Infrastructure Planning
  # =============================================================================
  plan:
    name: Infrastructure Plan
    runs-on: self-hosted
    needs: [setup, build]
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify Configuration
        working-directory: terraform
        run: |
          BACKEND_CONFIG="environments/$ENVIRONMENT/backend.hcl"
          VARS_FILE="environments/$ENVIRONMENT/terraform.tfvars"
          
          # Check required files exist
          for file in "$BACKEND_CONFIG" "$VARS_FILE"; do
            if [[ ! -f "$file" ]]; then
              echo "ERROR: Missing required file: $file"
              exit 1
            fi
          done
          
          # Verify backend bucket exists
          BUCKET_NAME=$(grep "bucket" "$BACKEND_CONFIG" | cut -d'"' -f2)
          if ! aws s3 ls "s3://$BUCKET_NAME" >/dev/null 2>&1; then
            echo "ERROR: Backend bucket not found: $BUCKET_NAME"
            exit 1
          fi
          
          echo "Configuration verified for $ENVIRONMENT"

      - name: Terraform Init & Validate
        working-directory: terraform
        run: |
          terraform init -backend-config="environments/$ENVIRONMENT/backend.hcl"
          terraform validate
          
          # Show current state summary
          RESOURCE_COUNT=$(terraform state list 2>/dev/null | wc -l)
          echo "Current state contains $RESOURCE_COUNT resources"

      - name: Terraform Plan
        working-directory: terraform
        run: |
          terraform plan \
            -var-file="environments/$ENVIRONMENT/terraform.tfvars" \
            -out="$ENVIRONMENT.tfplan" \
            -detailed-exitcode
          
          echo "PLAN_EXIT_CODE=$?" >> $GITHUB_ENV

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        if: env.PLAN_EXIT_CODE == '2'
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: terraform/${{ env.ENVIRONMENT }}.tfplan
          retention-days: 7

  # =============================================================================
  # Deployment
  # =============================================================================
  deploy:
    name: Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: self-hosted
    needs: [setup, plan]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    env:
      ENVIRONMENT: ${{ needs.setup.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -backend-config="environments/$ENVIRONMENT/backend.hcl"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: terraform/

      - name: Apply Infrastructure Changes
        working-directory: terraform
        run: |
          if [[ -f "$ENVIRONMENT.tfplan" ]]; then
            echo "Applying existing plan"
            terraform apply -auto-approve "$ENVIRONMENT.tfplan"
          else
            echo "Creating and applying new plan"
            terraform apply -auto-approve -var-file="environments/$ENVIRONMENT/terraform.tfvars"
          fi

      - name: Get Infrastructure Outputs
        id: outputs
        working-directory: terraform
        run: |
          {
            echo "s3_bucket=$(terraform output -raw s3_bucket_name)"
            echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)"
            echo "cloudfront_domain=$(terraform output -raw cloudfront_domain_name)"
          } >> $GITHUB_OUTPUT

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ env.ENVIRONMENT }}
          path: build

      - name: Deploy to S3
        run: |
          S3_BUCKET="${{ steps.outputs.outputs.s3_bucket }}"
          
          # Deploy with appropriate cache headers
          aws s3 sync build/ s3://$S3_BUCKET/ --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" --exclude "*.js" --exclude "*.css"
          
          aws s3 sync build/ s3://$S3_BUCKET/ --delete \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" --include "*.js" --include "*.css"

      - name: Invalidate CloudFront Cache
        run: |
          CLOUDFRONT_ID="${{ steps.outputs.outputs.cloudfront_id }}"
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_ID \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "Cache invalidation created: $INVALIDATION_ID"

      - name: Verify Deployment
        run: |
          sleep 30
          DOMAIN="${{ steps.outputs.outputs.cloudfront_domain }}"
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN)
          
          if [[ "$RESPONSE_CODE" == "200" ]]; then
            echo " Application is responding correctly (HTTP $RESPONSE_CODE)"
          else
            echo " Application returned HTTP $RESPONSE_CODE (may need propagation time)"
          fi

      - name: Deployment Summary
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # 🚀 Deployment Successful
          
          **Environment:** $ENVIRONMENT  
          **Application URL:** https://${{ steps.outputs.outputs.cloudfront_domain }}  
          **S3 Bucket:** ${{ steps.outputs.outputs.s3_bucket }}  
          **CloudFront ID:** ${{ steps.outputs.outputs.cloudfront_id }}  
          **Branch:** ${{ github.ref_name }}  
          **Commit:** ${{ github.sha }}  
          **Deployed by:** ${{ github.actor }}
          EOF